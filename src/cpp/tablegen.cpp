/**
 * This function implements the functions that generate the lookup tables
 * used by Thistlethwaite's algorithm. The tables are generated by utilizing
 * the id functions implemented in stageid.cpp and by doing a relatively
 * simple breadth first search.
 */

#include <map>
#include <unordered_map>
#include <queue>
#include <fstream>
#include "tablegen.hpp"
#include "abstrcube.hpp"
#include "tableutil.hpp"

typedef std::vector<rotation> rot_vector;
typedef std::vector<rot_vector> rot_vector_2d;

rot_vector_2d get_new_rotations(const rot_vector &rv) {
	rot_vector_2d res(18, rv);

	for (int i = 0; i < 12; i++) {
		res[i].emplace_back((rotation) i);
	}

	for (int i = 0; i < 6; i++) {
		res[i + 12].emplace_back((rotation) i);
		res[i + 12].emplace_back((rotation) i);
	}

	return res;
}

std::vector<abstrcube> get_new_cubes(const abstrcube &ac) {
	std::vector<abstrcube> res(18, ac);

	for (int i = 0; i < 12; i++) {
		res[i].rotate((rotation) i);
	}

	for (int i = 0; i < 6; i++) {
		res[i + 12].rotate((rotation) i);
		res[i + 12].rotate((rotation) i);
	}

	return res;
}

template<typename T>
void write_rotation_table(std::map<T, rot_vector> &rt, std::string file_name) {
	std::ofstream file;
	file.open(file_name);

	for (auto const &x : rt) {
		file << x.first << ' ' << rotvectoar(x.second) << std::endl;
	}

	file.close();
}

template <int g, typename T>
void search(std::vector<int> indexes) {
	abstrcube solved_cube;
	rot_vector empty_rotations;
	std::map<T, std::vector<rotation>> rotation_table;
	std::queue<abstrcube> cube_queue;
	std::queue<rot_vector> rotation_queue;

	cube_queue.emplace(solved_cube);
	rotation_queue.emplace(empty_rotations);

	while (!cube_queue.empty()) {
		abstrcube current_cube = cube_queue.front();
		rot_vector current_rotations = rotation_queue.front();

		cube_queue.pop();
		rotation_queue.pop();

		T current_hash = current_cube.gid<g, T>();

		if (rotation_table.find(current_hash) != rotation_table.end())
			continue;

		rotation_table[current_hash] = current_rotations;

		rot_vector_2d new_rotations = get_new_rotations(current_rotations);
		std::vector<abstrcube> new_cubes = get_new_cubes(current_cube);

		for (int &index : indexes) {
			cube_queue.emplace(new_cubes[index]);
			rotation_queue.emplace(new_rotations[index]);
		}
	}

	write_rotation_table(rotation_table, get_table_path(g));
}

void thistlethwaite::generate_tables() {
	std::vector<std::vector<int>> indexes = {
			{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
			{1, 2, 4, 5, 7, 8, 10, 11, 12, 15},
			{1, 4, 7, 10, 12, 14, 15, 17},
			{12, 13, 14, 15, 16, 17}
	};

	search<0, uint16_t>(indexes[0]);
	search<1, uint32_t>(indexes[1]);
	search<2, uint128_t>(indexes[2]);
	search<3, uint64_t >(indexes[3]);
}